//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;

public partial class transporter_QuoteEntities : DbContext
{
    public transporter_QuoteEntities()
        : base("name=transporter_QuoteEntities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public DbSet<Executive> Executives { get; set; }
    public DbSet<Source> Sources { get; set; }
    public DbSet<Customer> Customers { get; set; }
    public DbSet<RFQ> RFQs { get; set; }
    public DbSet<Route> Routes { get; set; }
    public DbSet<Zone> Zones { get; set; }
    public DbSet<QuoteTypeComponent> QuoteTypeComponents { get; set; }
    public DbSet<QuoteType> QuoteTypes { get; set; }
    public DbSet<Field> Fields { get; set; }
    public DbSet<ServiceType> ServiceTypes { get; set; }
    public DbSet<RFQFieldValue> RFQFieldValues { get; set; }
    public DbSet<Transporter> Transporters { get; set; }
    public DbSet<Shipment> Shipments { get; set; }
    public DbSet<ShipField> ShipFields { get; set; }
    public DbSet<Config> Configs { get; set; }
    public DbSet<Slot> Slots { get; set; }
    public DbSet<Container> Containers { get; set; }
    public DbSet<FinalRates> FinalRates { get; set; }
    public DbSet<Rating> Rating { get; set; }
    public DbSet<Quotations> Quotations { get; set; }

    [EdmFunction("transporter_QuoteEntities", "fn_SplitString_Row")]
    public virtual IQueryable<string> fn_SplitString_Row(string input, string character)
    {
        var inputParameter = input != null ?
            new ObjectParameter("Input", input) :
            new ObjectParameter("Input", typeof(string));

        var characterParameter = character != null ?
            new ObjectParameter("Character", character) :
            new ObjectParameter("Character", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[transporter_QuoteEntities].[fn_SplitString_Row](@Input, @Character)", inputParameter, characterParameter);
    }

    public virtual ObjectResult<sp_getRequest_Result> sp_getRequest(Nullable<int> transporterID, Nullable<int> isHistory)
    {
        var transporterIDParameter = transporterID.HasValue ?
            new ObjectParameter("TransporterID", transporterID) :
            new ObjectParameter("TransporterID", typeof(int));

        var isHistoryParameter = isHistory.HasValue ?
            new ObjectParameter("IsHistory", isHistory) :
            new ObjectParameter("IsHistory", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getRequest_Result>("sp_getRequest", transporterIDParameter, isHistoryParameter);
    }

    public virtual ObjectResult<sp_getScheduleList_Result> sp_getScheduleList(Nullable<System.DateTime> date, Nullable<int> userID)
    {
        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getScheduleList_Result>("sp_getScheduleList", dateParameter, userIDParameter);
    }

    public virtual ObjectResult<getTransporterQuoteDetail_Result> getTransporterQuoteDetail(Nullable<int> rFQID)
    {
        var rFQIDParameter = rFQID.HasValue ?
            new ObjectParameter("RFQID", rFQID) :
            new ObjectParameter("RFQID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTransporterQuoteDetail_Result>("getTransporterQuoteDetail", rFQIDParameter);
    }

    public virtual ObjectResult<sp_getTransportRFQ_Result> sp_getTransportRFQ(Nullable<int> userID, string serviceRights, Nullable<int> status)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));

        var serviceRightsParameter = serviceRights != null ?
            new ObjectParameter("ServiceRights", serviceRights) :
            new ObjectParameter("ServiceRights", typeof(string));

        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getTransportRFQ_Result>("sp_getTransportRFQ", userIDParameter, serviceRightsParameter, statusParameter);
    }

    public virtual ObjectResult<sp_getCountRFQ_Result> sp_getCountRFQ(Nullable<int> userID)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCountRFQ_Result>("sp_getCountRFQ", userIDParameter);
    }

    public virtual ObjectResult<sp_MapShipFields_Result> sp_MapShipFields(Nullable<int> quoteID, Nullable<int> userID, Nullable<int> shipmentID)
    {
        var quoteIDParameter = quoteID.HasValue ?
            new ObjectParameter("QuoteID", quoteID) :
            new ObjectParameter("QuoteID", typeof(int));

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));

        var shipmentIDParameter = shipmentID.HasValue ?
            new ObjectParameter("ShipmentID", shipmentID) :
            new ObjectParameter("ShipmentID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MapShipFields_Result>("sp_MapShipFields", quoteIDParameter, userIDParameter, shipmentIDParameter);
    }

    public virtual int sp_getScheduleSlot(Nullable<int> serviceTypeID)
    {
        var serviceTypeIDParameter = serviceTypeID.HasValue ?
            new ObjectParameter("ServiceTypeID", serviceTypeID) :
            new ObjectParameter("ServiceTypeID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_getScheduleSlot", serviceTypeIDParameter);
    }

    public virtual ObjectResult<sp_getAllocatedSlotDetail_Result> sp_getAllocatedSlotDetail(Nullable<System.DateTime> scheduleDT, Nullable<int> slotID)
    {
        var scheduleDTParameter = scheduleDT.HasValue ?
            new ObjectParameter("ScheduleDT", scheduleDT) :
            new ObjectParameter("ScheduleDT", typeof(System.DateTime));

        var slotIDParameter = slotID.HasValue ?
            new ObjectParameter("SlotID", slotID) :
            new ObjectParameter("SlotID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllocatedSlotDetail_Result>("sp_getAllocatedSlotDetail", scheduleDTParameter, slotIDParameter);
    }

    public virtual ObjectResult<sp_getRFQList_Result> sp_getRFQList(Nullable<int> userID)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getRFQList_Result>("sp_getRFQList", userIDParameter);
    }

    public virtual ObjectResult<sp_getDispatchPlanList_Result> sp_getDispatchPlanList(Nullable<int> userID)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDispatchPlanList_Result>("sp_getDispatchPlanList", userIDParameter);
    }
}
